# –ò–º–ø–æ—Ä—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å aiogram 
from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot
from aiogram.types import FSInputFile

# –ò–º–ø–æ—Ä—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å moviepy
from moviepy.video.io.VideoFileClip import VideoFileClip
from moviepy.video.io.ImageSequenceClip import ImageSequenceClip
from PIL import Image, ImageDraw
import numpy as np
import logging

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ python
import os

# –ò–º–ø–æ—Ä—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ 
from kbds.reply import del_kbd, startkbd

user_private_router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start 
@user_private_router.message(CommandStart())
async def start_cmd(message:types.Message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ! üìπ\n"
        "–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å:\n"
        "1Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–µ–∫ (–¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π).\n"
        "2Ô∏è‚É£ –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤–∏–¥–µ–æ –≤ GIF-–∞–Ω–∏–º–∞—Ü–∏—é.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—ë –∑–∞ —Ç–µ–±—è! üòä\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."
    ).format(user_first_name=message.from_user.first_name)

    await message.answer(welcome_text, reply_markup=startkbd.as_markup(
        resize_keyboard=True,
        input_field_placeholder='–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    ))



# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ 
class VideoToGif(StatesGroup):
    video = State()

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

@user_private_router.message(or_f(Command('/gif'), F.text.lower() == "üìÑ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ gif"))
async def get_video_for_circle(message: types.Message, state: FSMContext):
    await state.set_state(VideoToGif.video)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫—Ä—É–∂–æ—á–µ–∫')
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫—Ä—É–∂–æ—á–µ–∫.")


@user_private_router.message(VideoToGif.video)
async def process_video_circle(message: types.Message, bot, state: FSMContext):
    video_message = message.video
    if not video_message:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.')
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –≤–∏–¥–µ–æ
    file_info = await bot.get_file(video_message.file_id)
    video_path = os.path.join("temp", f"{video_message.file_id}.mp4")
    output_path = os.path.join("temp", f"{video_message.file_id}_circle.mp4")
    os.makedirs("temp", exist_ok=True)

    await bot.download_file(file_info.file_path, video_path)

    try:
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        clip = VideoFileClip(video_path)
        fps = clip.fps
        w, h = clip.size
        center = (w // 2, h // 2)
        radius = min(w, h) // 2

        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
        def create_circle_mask(size, center, radius):
            mask = Image.new("L", size, 0)
            draw = ImageDraw.Draw(mask)
            draw.ellipse(
                (
                    center[0] - radius, center[1] - radius,
                    center[0] + radius, center[1] + radius
                ),
                fill=255
            )
            return np.array(mask)

        mask = create_circle_mask((w, h), center, radius)

        # –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
        frames_dir = os.path.join("temp", "frames")
        os.makedirs(frames_dir, exist_ok=True)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ –∫–∞–¥—Ä—ã
        frames = []
        for i, frame in enumerate(clip.iter_frames(dtype="uint8")):
            frame_image = Image.fromarray(frame)
            frame_image.putalpha(Image.fromarray(mask))
            frame_path = os.path.join(frames_dir, f"frame_{i:04d}.png")
            frame_image.save(frame_path)
            frames.append(frame_path)

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
        from moviepy.video.io.ImageSequenceClip import ImageSequenceClip

        new_clip = ImageSequenceClip(frames, fps=fps)
        new_clip.write_videofile(output_path, codec="libx264", fps=fps)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(types.FSInputFile(output_path), caption="–í–∞—à–µ GIF –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! üé•")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if os.path.exists(video_path):
            os.remove(video_path)
        if os.path.exists(output_path):
            os.remove(output_path)
        if os.path.exists(frames_dir):
            for frame_file in os.listdir(frames_dir):
                os.remove(os.path.join(frames_dir, frame_file))
            os.rmdir(frames_dir)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–µ–∫
class VideoToCircle(StatesGroup):
    video = State()

@user_private_router.message(or_f(Command('/circle'), F.text.lower() == "üé• –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫—Ä—É–∂–æ—á–µ–∫"))
async def get_video_for_circle(message: types.Message, state: FSMContext):
    await state.set_state(VideoToCircle.video)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫—Ä—É–∂–æ—á–µ–∫.')
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫—Ä—É–∂–æ—á–µ–∫.")

@user_private_router.message(VideoToCircle.video)
async def process_video_circle(message: types.Message, bot: Bot, state: FSMContext):
    video_message = message.video
    if not video_message:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.')
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
    file_info = await bot.get_file(video_message.file_id)
    video_path = os.path.join("temp", f"{video_message.file_id}.mp4")
    output_path = os.path.join("temp", f"{video_message.file_id}_circle.mp4")
    os.makedirs("temp", exist_ok=True)

    await bot.download_file(file_info.file_path, video_path)

    try:
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        clip = VideoFileClip(video_path)
        fps = clip.fps
        w, h = clip.size
        center = (w // 2, h // 2)
        radius = min(w, h) // 2

        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
        def create_circle_mask(size, center, radius):
            mask = Image.new("L", size, 0)
            draw = ImageDraw.Draw(mask)
            draw.ellipse(
                (
                    center[0] - radius, center[1] - radius,
                    center[0] + radius, center[1] + radius
                ),
                fill=255
            )
            return np.array(mask)

        mask = create_circle_mask((w, h), center, radius)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –∫–∞–∂–¥–æ–º—É –∫–∞–¥—Ä—É
        def apply_circle_mask(frame):
            frame_image = Image.fromarray(frame)
            frame_image = frame_image.convert("RGBA")
            mask_image = Image.fromarray(mask).convert("L")
            frame_image.putalpha(mask_image)
            return np.array(frame_image)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫–æ –≤—Å–µ–º –∫–∞–¥—Ä–∞–º –≤–∏–¥–µ–æ
        new_clip = clip.fl_image(apply_circle_mask)
        new_clip.write_videofile(output_path, codec="libx264", fps=fps, audio=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not os.path.exists(output_path):
            await message.answer("–û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
            return

        video_file = FSInputFile(output_path)
        await message.answer_video(video_file, caption="–í–∞—à–µ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–∫–µ –≥–æ—Ç–æ–≤–æ! üé•")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}", exc_info=True)
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if os.path.exists(video_path):
            os.remove(video_path)
        if os.path.exists(output_path):
            os.remove(output_path)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.")
