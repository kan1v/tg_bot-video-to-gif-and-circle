# –ò–º–ø–æ—Ä—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å aiogram 
import shutil
from PyPDF2 import PdfReader
from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot
from aiogram.types import FSInputFile

# –ò–º–ø–æ—Ä—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å moviepy
from moviepy import VideoClip
from moviepy.video.io.VideoFileClip import VideoFileClip
from moviepy.video.io.ImageSequenceClip import ImageSequenceClip
from moviepy.video.fx.Resize import Resize
from moviepy.video.fx.Crop import Crop

# –ò–º–ø–æ—Ä—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å ffmpeg
import subprocess
import imageio_ffmpeg as ffmpeg

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—Å –∏ –ø–¥—Ñ —Ñ–∞–π–ª–∞–º–∏ 
from docx import Document
import pypandoc

# –ò–º–ø–æ—Ä—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å PIL –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä—É–∂–æ—á–∫–∞–º–∏ 
from PIL import Image, ImageDraw

# –ò–º–ø–æ—Ä—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å numpy 
import numpy as np

# –ò–º–ø–æ—Ä—Ç logging –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
import logging

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ python
import os

# –ò–º–ø–æ—Ä—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ 
from kbds.reply import del_kbd, startkbd

user_private_router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start 
@user_private_router.message(CommandStart())
async def start_cmd(message:types.Message):
    welcome_text = (
    "üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n\n"
    "–Ø **VideoMasterBot** üé¨ ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ!\n"
    "–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å:\n"
    "1Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ WebM –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤.\n"
    "2Ô∏è‚É£ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–∏ (–¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π).\n"
    "3Ô∏è‚É£ –ü—Ä–µ–≤—Ä–∞—â–∞—Ç—å –≤–∏–¥–µ–æ –≤ GIF-–∞–Ω–∏–º–∞—Ü–∏—é.\n"
    "4Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å GIF –≤ —Ñ–æ—Ä–º–∞—Ç WebM.\n\n"
    "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª, –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é –∑–∞ —Ç–µ–±—è! üòä\n\n"
    "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
).format(user_first_name=message.from_user.first_name)


    await message.answer(welcome_text, reply_markup=startkbd.as_markup(
        resize_keyboard=True,
        input_field_placeholder='–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    ))



# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ 
class VideoToGif(StatesGroup):
    video = State()

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

@user_private_router.message(or_f(Command('/gif'), F.text.lower() == "üìÑ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ gif"))
async def get_video_for_circle(message: types.Message, state: FSMContext):
    await state.set_state(VideoToGif.video)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫—Ä—É–∂–æ—á–µ–∫')
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫—Ä—É–∂–æ—á–µ–∫.")


@user_private_router.message(VideoToGif.video)
async def process_video_circle(message: types.Message, bot, state: FSMContext):
    video_message = message.video
    if not video_message:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.')
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –≤–∏–¥–µ–æ
    file_info = await bot.get_file(video_message.file_id)
    video_path = os.path.join("temp", f"{video_message.file_id}.mp4")
    output_path = os.path.join("temp", f"{video_message.file_id}_circle.mp4")
    os.makedirs("temp", exist_ok=True)

    await bot.download_file(file_info.file_path, video_path)

    try:
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        clip = VideoFileClip(video_path)
        fps = clip.fps
        w, h = clip.size
        center = (w // 2, h // 2)
        radius = min(w, h) // 2

        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
        def create_circle_mask(size, center, radius):
            mask = Image.new("L", size, 0)
            draw = ImageDraw.Draw(mask)
            draw.ellipse(
                (
                    center[0] - radius, center[1] - radius,
                    center[0] + radius, center[1] + radius
                ),
                fill=255
            )
            return np.array(mask)

        mask = create_circle_mask((w, h), center, radius)

        # –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
        frames_dir = os.path.join("temp", "frames")
        os.makedirs(frames_dir, exist_ok=True)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ –∫–∞–¥—Ä—ã
        frames = []
        for i, frame in enumerate(clip.iter_frames(dtype="uint8")):
            frame_image = Image.fromarray(frame)
            frame_image.putalpha(Image.fromarray(mask))
            frame_path = os.path.join(frames_dir, f"frame_{i:04d}.png")
            frame_image.save(frame_path)
            frames.append(frame_path)

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
        from moviepy.video.io.ImageSequenceClip import ImageSequenceClip

        new_clip = ImageSequenceClip(frames, fps=fps)
        new_clip.write_videofile(output_path, codec="libx264", fps=fps)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(types.FSInputFile(output_path), caption="–í–∞—à–µ GIF –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! üé•")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if os.path.exists(video_path):
            os.remove(video_path)
        if os.path.exists(output_path):
            os.remove(output_path)
        if os.path.exists(frames_dir):
            for frame_file in os.listdir(frames_dir):
                os.remove(os.path.join(frames_dir, frame_file))
            os.rmdir(frames_dir)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

#–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–∫–æ–≤
class VideoToCircleMessage(StatesGroup):
    video = State()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@user_private_router.message(or_f(Command('/circle'), F.text.lower() == "üé• –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫—Ä—É–∂–æ—á–µ–∫"))
async def get_video_for_circle(message: types.Message, state: FSMContext):
    await state.set_state(VideoToCircleMessage.video)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫—Ä—É–∂–æ—á–µ–∫.')
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫—Ä—É–∂–æ—á–µ–∫.")

@user_private_router.message(VideoToCircleMessage.video)
async def process_video_circle_to_message(message: types.Message, bot: Bot, state: FSMContext):
    video_message = message.video
    if not video_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FFmpeg
    if not shutil.which("ffmpeg"):
        await message.answer("–û—à–∏–±–∫–∞: FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH.")
        return

    # –ü—É—Ç–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    file_info = await bot.get_file(video_message.file_id)
    video_path = os.path.join("temp", f"{video_message.file_id}.mp4")
    output_path = os.path.join("temp", f"{video_message.file_id}_circle.mp4")
    os.makedirs("temp", exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    await bot.download_file(file_info.file_path, video_path)

    try:
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ –¥–ª—è –∫—Ä—É–∂–æ—á–∫–∞...")

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è FFmpeg
        command = [
    "ffmpeg",
    "-i", video_path,  # –í—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
    "-vf", "crop='min(iw,ih)':'min(iw,ih)',scale=320:320,format=yuva420p",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    "-vcodec", "libx264",
    "-acodec", "aac",
    "-preset", "ultrafast",
    "-y", output_path  # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
]


        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã FFmpeg
        subprocess.run(command, check=True, stderr=subprocess.PIPE, text=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∫–∞–∫ video_message
        await message.answer_video_note(
            video_note=FSInputFile(output_path),
            caption="–í–∞—à–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–µ–∫ –≥–æ—Ç–æ–≤–æ! üîµ"
        )

    except subprocess.CalledProcessError as e:
        logging.error(f"FFmpeg error: {e.stderr}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e.stderr}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if os.path.exists("temp"):
            shutil.rmtree("temp")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
class VideoToStickerMessage(StatesGroup):
    video = State()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@user_private_router.message(or_f(Command('/sticker'), F.text.lower() == "üéû –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ webm"))
async def get_video_for_sticker(message: types.Message, state: FSMContext):
    await state.set_state(VideoToStickerMessage.video)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Å—Ç–∏–∫–µ—Ä (—Ñ–æ—Ä–º–∞—Ç WebM).')
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Å—Ç–∏–∫–µ—Ä.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
@user_private_router.message(VideoToStickerMessage.video)
async def process_video_to_sticker(message: types.Message, bot: Bot, state: FSMContext):
    video_message = message.video
    if not video_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.")
        return

    # –ü—É—Ç–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    file_info = await bot.get_file(video_message.file_id)
    video_path = os.path.join("temp", f"{video_message.file_id}.mp4")
    output_path = os.path.join("temp", f"{video_message.file_id}_sticker.webm")
    os.makedirs("temp", exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    await bot.download_file(file_info.file_path, video_path)

    try:
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞...")

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –≤ WebM
        command = [
    "ffmpeg",
    "-i", video_path,  # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    "-vf", "crop='min(iw,ih)':'min(iw,ih)',scale=512:512,format=yuva420p",  # –û–±—Ä–µ–∑–∫–∞, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
    "-c:v", "libvpx-vp9",  # –ö–æ–¥–µ–∫ VP9
    "-b:v", "100k",  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±–∏—Ç—Ä–µ–π—Ç–∞
    "-pix_fmt", "yuva420p",  # –§–æ—Ä–º–∞—Ç –ø–∏–∫—Å–µ–ª–µ–π
    "-r", "30",  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ FPS
    "-an",  # –£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞
    "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_path  # –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
]

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã FFmpeg
        subprocess.run(command, check=True)

        # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ InputFile
        document = FSInputFile(output_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        await message.answer_document(
    document=document,
    caption="–í–∞—à –≤–∏–¥–µ–æ —Å—Ç–∏–∫–µ—Ä –≥–æ—Ç–æ–≤! üéâ"
)


    except subprocess.CalledProcessError as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ FFmpeg: {e}")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path in [video_path, output_path]:
            if os.path.exists(path):
                os.remove(path)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ GIF
class GifToWebMMessage(StatesGroup):
    gif = State()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@user_private_router.message(or_f(Command('/gifwebm'), F.text.lower() == "üéû –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å gif –≤ webm"))
async def get_gif_for_webm(message: types.Message, state: FSMContext):
    await state.set_state(GifToWebMMessage.gif)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ GIF –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebM.')
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É GIF –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebM.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ GIF
@user_private_router.message(GifToWebMMessage.gif)
async def process_gif_to_webm(message: types.Message, bot: Bot, state: FSMContext):
    gif_message = message.document or message.animation
    if not gif_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ GIF-—Ñ–∞–π–ª.")
        return

    # –ü—É—Ç–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    file_info = await bot.get_file(gif_message.file_id)
    gif_path = os.path.join("temp", f"{gif_message.file_id}.gif")
    output_path = os.path.join("temp", f"{gif_message.file_id}.webm")
    os.makedirs("temp", exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–µ–º GIF
    await bot.download_file(file_info.file_path, gif_path)

    try:
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é GIF –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebM...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GIF —Ñ–∞–π–ª–µ —Å –ø–æ–º–æ—â—å—é ffprobe
        ffprobe_command = [
            "ffprobe", "-v", "error", "-show_format", "-show_streams", gif_path
        ]
        ffprobe_output = subprocess.run(ffprobe_command, capture_output=True, text=True)
        if ffprobe_output.returncode != 0:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ GIF: {ffprobe_output.stderr}")
            logging.error(f"–û—à–∏–±–∫–∞ FFprobe: {ffprobe_output.stderr}")
            return

        # –ö–æ–º–∞–Ω–¥–∞ FFmpeg –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è GIF –≤ WebM —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —Ä–∞–∑–º–µ—Ä—É –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
        command = [
    "ffmpeg",
    "-t", "3",  # –û–±—Ä–µ–∑–∫–∞ –¥–æ 3 —Å–µ–∫—É–Ω–¥
    "-i", gif_path,  # –í—Ö–æ–¥–Ω–æ–π GIF
    "-vf", "scale='if(gte(iw,ih),512,-1)':'if(gte(iw,ih),-1,512)'",  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 512x512, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
    "-c:v", "libvpx-vp9",  # –ö–æ–¥–µ–∫ VP9 –¥–ª—è WebM
    "-b:v", "256k",  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±–∏—Ç—Ä–µ–π—Ç–∞ –¥–æ 256 KB
    "-pix_fmt", "yuv420p",  # –§–æ—Ä–º–∞—Ç –ø–∏–∫—Å–µ–ª–µ–π
    "-r", "30",  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ FPS
    "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_path  # –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É WebM
]


        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã FFmpeg –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        ffmpeg_output = subprocess.run(command, capture_output=True, text=True)
        if ffmpeg_output.returncode != 0:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ GIF –≤ WebM: {ffmpeg_output.stderr}")
            logging.error(f"–û—à–∏–±–∫–∞ FFmpeg: {ffmpeg_output.stderr}")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∂–∞—Ç–∏–µ
        file_size = os.path.getsize(output_path)
        if file_size > 256 * 1024:  # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ 256KB, —Å–∂–∏–º–∞–µ–º
            command = [
                "ffmpeg",
                "-i", output_path,  # –í—Ö–æ–¥–Ω–æ–π WebM
                "-c:v", "libvpx-vp9",  # –ö–æ–¥–µ–∫ VP9
                "-b:v", "256k",  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±–∏—Ç—Ä–µ–π—Ç–∞
                "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                output_path  # –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É WebM
            ]
            subprocess.run(command, check=True)

        # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ InputFile
        document = FSInputFile(output_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ WebM —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(
            document=document,
            caption="–í–∞—à WebM —Ñ–∞–π–ª –≥–æ—Ç–æ–≤! üéâ"
        )

    except subprocess.CalledProcessError as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GIF: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ FFmpeg: {e}")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path in [gif_path, output_path]:
            if os.path.exists(path):
                os.remove(path)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
class ImageToWebMMessage(StatesGroup):
    image = State()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@user_private_router.message(or_f(Command('/imagetowebm'), F.text.lower() == "üñº –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ webm"))
async def get_image_for_webm(message: types.Message, state: FSMContext):
    await state.set_state(ImageToWebMMessage.image)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebM.')
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebM.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@user_private_router.message(ImageToWebMMessage.image)
async def process_image_to_webm(message: types.Message, bot: Bot, state: FSMContext):
    image_message = message.document or message.photo[-1]
    if not image_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –∏–ª–∏ JPEG.")
        return

    # –ü—É—Ç–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    file_info = await bot.get_file(image_message.file_id)
    image_path = os.path.join("temp", f"{image_message.file_id}.png")
    output_path = os.path.join("temp", f"{image_message.file_id}.webm")
    os.makedirs("temp", exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await bot.download_file(file_info.file_path, image_path)

    try:
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebM...")

        # –ö–æ–º–∞–Ω–¥–∞ FFmpeg –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WebM
        command = [
            "ffmpeg",
            "-loop", "1",  # –¶–∏–∫–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            "-i", image_path,  # –í—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            "-vf", "scale=100:100",  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 100x100
            "-c:v", "libvpx-vp9",  # –ö–æ–¥–µ–∫ VP9 –¥–ª—è WebM
            "-b:v", "256k",  # –ë–∏—Ç—Ä–µ–π—Ç
            "-pix_fmt", "yuva420p",  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞ (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω)
            "-t", "3",  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ 3 —Å–µ–∫—É–Ω–¥—ã
            "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_path  # –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É WebM
        ]

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã FFmpeg –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        ffmpeg_output = subprocess.run(command, capture_output=True, text=True)
        if ffmpeg_output.returncode != 0:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WebM: {ffmpeg_output.stderr}")
            logging.error(f"–û—à–∏–±–∫–∞ FFmpeg: {ffmpeg_output.stderr}")
            return

        # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ InputFile
        document = FSInputFile(output_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ WebM —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(
            document=document,
            caption="–í–∞—à WebM —Ñ–∞–π–ª —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º –≥–æ—Ç–æ–≤! üéâ"
        )

    except subprocess.CalledProcessError as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ FFmpeg: {e}")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path in [image_path, output_path]:
            if os.path.exists(path):
                os.remove(path)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class ResizeImageMessage(StatesGroup):
    image = State()
    height = State()
    width = State()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@user_private_router.message(or_f(Command('/resizeimage'), F.text.lower() == "üñº —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"))
async def get_image_for_resizing(message: types.Message, state: FSMContext):
    await state.set_state(ResizeImageMessage.image)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞.')
    logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@user_private_router.message(ResizeImageMessage.image)
async def ask_height(message: types.Message, bot: Bot, state: FSMContext):
    image_message = message.document or message.photo[-1]
    if not image_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –∏–ª–∏ JPEG.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    file_info = await bot.get_file(image_message.file_id)
    input_path = os.path.join("temp", f"{image_message.file_id}.jpg")
    os.makedirs("temp", exist_ok=True)
    await bot.download_file(file_info.file_path, input_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ FSM
    await state.update_data(input_path=input_path)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –≤—ã—Å–æ—Ç—ã
    await state.set_state(ResizeImageMessage.height)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –≤—ã—Å–æ—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ –ø–∏–∫—Å–µ–ª—è—Ö):")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã
@user_private_router.message(ResizeImageMessage.height)
async def ask_width(message: types.Message, state: FSMContext):
    try:
        height = int(message.text)
        if height <= 0:
            raise ValueError("–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        await state.update_data(height=height)
        await state.set_state(ResizeImageMessage.width)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —à–∏—Ä–∏–Ω—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ –ø–∏–∫—Å–µ–ª—è—Ö):")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã—Å–æ—Ç—ã.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã
@user_private_router.message(ResizeImageMessage.width)
async def resize_image(message: types.Message, state: FSMContext):
    try:
        width = int(message.text)
        if width <= 0:
            raise ValueError("–®–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        # –î–∞–Ω–Ω—ã–µ –∏–∑ FSM
        data = await state.get_data()
        input_path = data["input_path"]
        height = data["height"]
        output_path = os.path.join("temp", f"{os.path.basename(input_path).split('.')[0]}_resized.png")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(input_path) as img:
            img = img.convert("RGBA")  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            img = img.resize((width, height), Image.Resampling.LANCZOS)
            img.save(output_path, format="PNG")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        resized_image = FSInputFile(output_path)
        await message.answer_document(
            document=resized_image,
            caption=f"–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {width}x{height}! üéâ"
        )
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —à–∏—Ä–∏–Ω—ã.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path in [data.get("input_path"), output_path]:
            if path and os.path.exists(path):
                os.remove(path)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()



